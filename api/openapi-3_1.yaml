openapi: 3.1.0
info:
  title: FinHome Tracker API - OpenAPI 3.1
  description: |-
    The FinHome Tracker API is intended to act as an opinionated way to track and manage domestic financial information backed up within an InfluxDB database.

    This API can be used for both bulk insertion of movements and as a base to generate a UI.

    Some useful links:
    - [The FinHome Tracker API repository](https://github.com/finhome-track/finhome-track-api)
    - [The source API definition for the FinHome Tracker API](https://github.com/finhome-track/finhome-track-api/blob/main/api/openap-3_1.yaml)

  contact:
    email: 6834088+PBarri@users.noreply.github.com
  license:
    name: GPL-3.0 License
    url: https://www.gnu.org/licenses/gpl-3.0.html#license-text
  version: 0.0.1
externalDocs:
  description: Powered by InfluxDB
  url: https://www.influxdata.com/
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: income
    description: Operations involving incomes
  - name: expense
    description: Operations involving expenses
  - name: transference
    description: Operations involving transferences between different accounts
paths:
  /income:
    put:
      tags:
        - income
      summary: Update an existing income
      description: Update an existing income by Id
      operationId: updateIncome
      requestBody:
        description: Update an existent income in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Income'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
        '400':
          description: Invalid ID supplied
        '404':
          description: Income not found
        '422':
          description: Validation exception
    post:
      tags:
        - income
      summary: Add a new income to the database
      description: Add a new income to the database
      operationId: addIncome
      requestBody:
        description: Create a new income in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Income'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - income
      summary: List incomes
      description: Retrieves incomes in the database
      operationId: getIncomes
      parameters:
        - name: from
          in: query
          description: Filter by `from` tag
          required: false
          explode: true
          schema:
            type: string
        - name: to
          in: query
          description: Filter by `to` tag
          required: false
          explode: true
          schema:
            type: string
        - name: since
          in: query
          description: List only incomes added since the provided value
          required: false
          explode: false
          schema:
            type: string
            default: 1w
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Income'
        '400':
          description: Invalid status value
  /income/{incomeId}:
    get:
      tags:
        - income
      summary: Find income by ID
      description: Returns a single income
      operationId: getIncomeById
      parameters:
        - name: incomeId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
        '400':
          description: Invalid ID supplied
        '404':
          description: Income not found
    post:
      tags:
        - income
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: incomeId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
        '404':
          description: Income not found
        '422':
          description: Validation exception

  /expense:
    put:
      tags:
        - expense
      summary: Update an existing expense
      description: Update an existing expense by Id
      operationId: updateExpense
      requestBody:
        description: Update an existent expense in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          description: Invalid ID supplied
        '404':
          description: Expense not found
        '422':
          description: Validation exception
    post:
      tags:
        - expense
      summary: Add a new expense to the database
      description: Add a new expense to the database
      operationId: addExpense
      requestBody:
        description: Create a new expense in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - expense
      summary: List expenses
      description: Retrieves expenses in the database
      operationId: getExpenses
      parameters:
        - name: from
          in: query
          description: Filter by `from` tag
          required: false
          explode: true
          schema:
            type: string
        - name: to
          in: query
          description: Filter by `to` tag
          required: false
          explode: true
          schema:
            type: string
        - name: since
          in: query
          description: List only incomes added since the provided value
          required: false
          explode: false
          schema:
            type: string
            default: 1w
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
        '400':
          description: Invalid status value
  /expense/{expenseId}:
    get:
      tags:
        - expense
      summary: Find expense by ID
      description: Returns a single expense
      operationId: getExpenseById
      parameters:
        - name: expenseId
          in: path
          description: ID of expense to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          description: Invalid ID supplied
        '404':
          description: Expense not found
    post:
      tags:
        - expense
      summary: Updates a expense in the store with form data
      description: ''
      operationId: updateExpenseWithForm
      parameters:
        - name: expenseId
          in: path
          description: ID of expense that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
        '404':
          description: Expense not found
        '422':
          description: Validation exception

  /transference:
    put:
      tags:
        - transference
      summary: Update an existing transference
      description: Update an existing transference by Id
      operationId: updateTransference
      requestBody:
        description: Update an existent transference in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transference'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transference'
        '400':
          description: Invalid ID supplied
        '404':
          description: Transference not found
        '422':
          description: Validation exception
    post:
      tags:
        - transference
      summary: Add a new transference to the database
      description: Add a new transference to the database
      operationId: addTransference
      requestBody:
        description: Create a new transference in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transference'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transference'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - transference
      summary: List transferences
      description: Retrieves transferences in the database
      operationId: getTransferences
      parameters:
        - name: from
          in: query
          description: Filter by `from` tag
          required: false
          explode: true
          schema:
            type: string
        - name: to
          in: query
          description: Filter by `to` tag
          required: false
          explode: true
          schema:
            type: string
        - name: since
          in: query
          description: List only transference added since the provided value
          required: false
          explode: false
          schema:
            type: string
            default: 1w
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transference'
        '400':
          description: Invalid status value
  /transference/{transferenceId}:
    get:
      tags:
        - transference
      summary: Find transference by ID
      description: Returns a single transference
      operationId: getTransferenceById
      parameters:
        - name: transferenceId
          in: path
          description: ID of transference to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transference'
        '400':
          description: Invalid ID supplied
        '404':
          description: Transference not found
    post:
      tags:
        - transference
      summary: Updates a transference in the store with form data
      description: ''
      operationId: updateTransferenceWithForm
      parameters:
        - name: transferenceId
          in: path
          description: ID of transference that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
        '404':
          description: Income not found
        '422':
          description: Validation exception

components:
  schemas:
    Income:
      required:
        - timestamp
        - value
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        timestamp:
          type: integer
          format: timestamp
        from:
          type: string
          description: Entity or bank account the income comes from
          examples: ["Company", "Savings Account"]
        to:
          type: string
          description: Owned account the incomes goes to
          examples: ["Savings Account", "Shared Account"]
    Expense:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        petId:
          type: integer
          format: int64
          examples: [198772]
        quantity:
          type: integer
          format: int32
          examples: [7]
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          examples: [approved]
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
    Transference:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [100000]
        username:
          type: string
          examples: [fehguy]
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Income:
      description: Income object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Income'
    IncomeArray:
      description: List of Income objects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Income'
    Expense:
      description: Expense object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Expense'
    ExpenseArray:
      description: List of Expense objects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Expense'
    Transference:
      description: Transference object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transference'
    TransferenceArray:
      description: List of Transference objects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Transference'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
